/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It assumes a model where users own their data and can be granted specific roles within shared contexts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /galleries/{galleryId}: Stores public gallery information. Anyone can read, but only authenticated users can create, update or delete.
 * - /galleries/{galleryId}/artworks/{artworkId}: Stores artwork information within a gallery. Anyone can read, but only authenticated users can create, update or delete.
 *
 * Key Security Decisions:
 * - User data is strictly private; listing all users is disallowed.
 * - Public read access is granted for gallery and artwork.
 * - Owner-only writes are enforced on galleries and artworks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.uid: 'user123'
     * @allow (get) User with ID 'user123' reads their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (update) User with ID 'user456' attempts to update user 'user123' profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for galleries.
     * @path /galleries/{galleryId}
     * @allow (get) Any user can read gallery information.
     *   - request.auth: null
     * @allow (create) Authenticated user can create a gallery.
     *   - request.auth.uid: 'user123'
     * @deny (update) Unauthenticated user attempts to update a gallery.
     *   - request.auth: null
     * @principle Public read, owner-only writes, authenticated writes.
     */
    match /galleries/{galleryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for artworks within a gallery.
     * @path /galleries/{galleryId}/artworks/{artworkId}
     * @allow (get) Any user can read artwork information.
     *   - request.auth: null
     * @allow (create) Authenticated user can create an artwork.
     *   - request.auth.uid: 'user123'
     * @deny (update) Unauthenticated user attempts to update an artwork.
     *   - request.auth: null
     * @principle Public read, owner-only writes, authenticated writes.
     */
    match /galleries/{galleryId}/artworks/{artworkId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}