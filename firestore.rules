/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to galleries and artworks while restricting write access
 * to prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, only accessible to the user themselves.
 * - /galleries/{galleryId}: Stores public gallery information, readable by anyone.
 * - /galleries/{galleryId}/artworks/{artworkId}: Stores artwork information within a gallery, readable by anyone.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Galleries and artworks are publicly readable to allow for open access.
 * - Writes to galleries and artworks are disabled in this prototype to prevent accidental modifications.
 * - List operations on /users/{userId} are disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @allow (get) - User 'abc' can read their profile if request.auth.uid == 'abc'.
     * @allow (update) - User 'abc' can update their profile if request.auth.uid == 'abc'.
     * @allow (delete) - User 'abc' can delete their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile with ID 'abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // isOwner checks if the user ID in the request matches the document ID.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // isSignedIn checks if the user is authenticated.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to galleries.
     * @path /galleries/{galleryId}
     * @allow (get, list) - Anyone can read gallery information.
     * @deny (create, update, delete) - No one can modify galleries in this prototype.
     * @principle Allows public read access to galleries while restricting write access.
     */
    match /galleries/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to artworks within a gallery.
     * @path /galleries/{galleryId}/artworks/{artworkId}
     * @allow (get, list) - Anyone can read artwork information.
     * @deny (create, update, delete) - No one can modify artworks in this prototype.
     * @principle Allows public read access to artworks while restricting write access.
     */
    match /galleries/{galleryId}/artworks/{artworkId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}